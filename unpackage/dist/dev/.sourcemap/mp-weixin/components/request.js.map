{"version":3,"file":"request.js","sources":["components/request.js"],"sourcesContent":["// // const BASE_URL = 'http://172.20.10.2:1314';\n// const BASE_URL = 'https://leaf.yuntong.work:1314';\n\n// export const request = (options) => {\n//   return new Promise(async (resolve, reject) => {\n//     const isFormData = options.isFormData === true;\n//     const method = options.method || 'GET';\n//     const headers = {\n//       'Authorization': uni.getStorageSync('token') || ''\n//     };\n\n//     if (!isFormData) {\n//       headers['Content-Type'] = 'application/json';\n//     }\n\n//     // ✅ H5 下的 FormData 请求用 fetch 处理\n//     if (isFormData && typeof FormData !== 'undefined' && typeof window !== 'undefined') {\n//       try {\n//         const res = await fetch(BASE_URL + options.url, {\n//           method,\n//           headers, // ⚠️ 不手动设置 Content-Type，浏览器会自动附加 multipart/form-data 边界\n//           body: options.data\n//         });\n\n//         const data = await res.json();\n\n//         if (res.ok) {\n//           resolve(data);\n//         } else {\n//           uni.showToast({\n//             title: data.message || data.msg || '服务器错误',\n//             icon: 'none'\n//           });\n//           reject(data);\n//         }\n//       } catch (err) {\n//         uni.showToast({ title: '请求失败，请检查网络', icon: 'none' });\n//         reject(err);\n//       }\n//       return;\n//     }\n\n//     // 非 FormData 或非 H5 平台使用 uni.request\n//     uni.request({\n//       url: BASE_URL + options.url,\n//       method,\n//       data: options.data || {},\n//       header: headers,\n//       success: (res) => {\n//         if (res.statusCode === 200) {\n//           resolve(res.data);\n//         } else {\n//           uni.showToast({\n//             title: res.data.message || res.data.msg || '服务器错误',\n//             icon: 'none'\n//           });\n//           reject(res);\n//         }\n//       },\n//       fail: (err) => {\n//         uni.showToast({ title: '请求失败，请检查网络', icon: 'none' });\n//         reject(err);\n//       }\n//     });\n//   });\n// };\n// 支持 App、H5、小程序的 request 封装\n// ⚠️ 若用于小程序端，https://leaf.yuntong.work:1314 必须已配置到微信后台 request 合法域名列表中\n\nconst BASE_URL = 'https://leaf.yuntong.work:1314';\n\nexport const request = (options) => {\n  return new Promise(async (resolve, reject) => {\n    const isFormData = options.isFormData === true;\n    const method = options.method || 'GET';\n    const headers = {\n      'Authorization': uni.getStorageSync('token') || ''\n    };\n\n    if (!isFormData) {\n      headers['Content-Type'] = 'application/json';\n    }\n\n    // 判断是否 H5 平台，并且使用的是 FormData（浏览器 fetch 支持自动 multipart）\n    const isH5 = typeof window !== 'undefined' && typeof FormData !== 'undefined';\n\n    if (isFormData && isH5) {\n      try {\n        const res = await fetch(BASE_URL + options.url, {\n          method,\n          headers, // 不手动设置 Content-Type，让浏览器自动附带 multipart/form-data 边界\n          body: options.data\n        });\n\n        const data = await res.json();\n        if (res.ok) {\n          resolve(data);\n        } else {\n          uni.showToast({ title: data.message || data.msg || '服务器错误', icon: 'none' });\n          reject(data);\n        }\n      } catch (err) {\n        uni.showToast({ title: '请求失败，请检查网络', icon: 'none' });\n        reject(err);\n      }\n      return;\n    }\n\n    // 非 H5 FormData 情况下（App、小程序等）\n    uni.request({\n      url: BASE_URL + options.url,\n      method,\n      data: options.data || {},\n      header: headers,\n      success: (res) => {\n        if (res.statusCode === 200) {\n          resolve(res.data);\n        } else {\n          uni.showToast({\n            title: res.data.message || res.data.msg || '服务器错误',\n            icon: 'none'\n          });\n          reject(res);\n        }\n      },\n      fail: (err) => {\n        uni.showToast({ title: '请求失败，请检查网络', icon: 'none' });\n        reject(err);\n      }\n    });\n  });\n};\n"],"names":["uni"],"mappings":";;AAqEA,MAAM,WAAW;AAEL,MAAC,UAAU,CAAC,YAAY;AAClC,SAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC5C,UAAM,aAAa,QAAQ,eAAe;AAC1C,UAAM,SAAS,QAAQ,UAAU;AACjC,UAAM,UAAU;AAAA,MACd,iBAAiBA,cAAG,MAAC,eAAe,OAAO,KAAK;AAAA,IACtD;AAEI,QAAI,CAAC,YAAY;AACf,cAAQ,cAAc,IAAI;AAAA,IAC3B;AAGD,UAAM,OAAO,OAAO,WAAW,eAAe,OAAO,aAAa;AAElE,QAAI,cAAc,MAAM;AACtB,UAAI;AACF,cAAM,MAAM,MAAM,MAAM,WAAW,QAAQ,KAAK;AAAA,UAC9C;AAAA,UACA;AAAA;AAAA,UACA,MAAM,QAAQ;AAAA,QACxB,CAAS;AAED,cAAM,OAAO,MAAM,IAAI;AACvB,YAAI,IAAI,IAAI;AACV,kBAAQ,IAAI;AAAA,QACtB,OAAe;AACLA,wBAAAA,MAAI,UAAU,EAAE,OAAO,KAAK,WAAW,KAAK,OAAO,SAAS,MAAM,OAAQ,CAAA;AAC1E,iBAAO,IAAI;AAAA,QACZ;AAAA,MACF,SAAQ,KAAK;AACZA,sBAAG,MAAC,UAAU,EAAE,OAAO,cAAc,MAAM,OAAM,CAAE;AACnD,eAAO,GAAG;AAAA,MACX;AACD;AAAA,IACD;AAGDA,kBAAAA,MAAI,QAAQ;AAAA,MACV,KAAK,WAAW,QAAQ;AAAA,MACxB;AAAA,MACA,MAAM,QAAQ,QAAQ,CAAE;AAAA,MACxB,QAAQ;AAAA,MACR,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,eAAe,KAAK;AAC1B,kBAAQ,IAAI,IAAI;AAAA,QAC1B,OAAe;AACLA,wBAAAA,MAAI,UAAU;AAAA,YACZ,OAAO,IAAI,KAAK,WAAW,IAAI,KAAK,OAAO;AAAA,YAC3C,MAAM;AAAA,UAClB,CAAW;AACD,iBAAO,GAAG;AAAA,QACX;AAAA,MACF;AAAA,MACD,MAAM,CAAC,QAAQ;AACbA,sBAAG,MAAC,UAAU,EAAE,OAAO,cAAc,MAAM,OAAM,CAAE;AACnD,eAAO,GAAG;AAAA,MACX;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;;"}